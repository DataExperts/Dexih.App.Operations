using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;
using dexih.functions;
using Dexih.Utils.CopyProperties;

namespace dexih.repository
{
    public class SeedData
    {
        private static readonly DateTime CurrentDate = DateTime.Now;

        public async Task UpdateReferenceData(DexihRepositoryContext repoDbContext, RoleManager<IdentityRole> roleManager, UserManager<ApplicationUser> userManager)
        {
            try
            {
                if (roleManager != null && userManager != null)
                {
                    var roles = new string[] { "ADMINISTRATOR", "MANAGER", "USER", "VIEWER" };

                    foreach (var role in roles)
                    {
                        if (!(await roleManager.RoleExistsAsync(role)))
                        {
                            var identityRole = new IdentityRole(role);
                            var identityResult = await roleManager.CreateAsync(identityRole);

                            if (!identityResult.Succeeded)
                            {
                                //configurationLogger.LogCritical(
                                //    String.Format("!identityResult.Succeeded after roleManager.CreateAsync(identityRole) for identityRole with roleName { 0} ", role));
                                //foreach (var error in identityResult.Errors)
                                //{
                                //    configurationLogger.LogCritical(
                                //        String.Format(
                                //            "identityResult.Error.Description: {0}",
                                //            error.Description));
                                //    configurationLogger.LogCritical(
                                //        String.Format(
                                //            "identityResult.Error.Code: {0}",
                                //         error.Code));
                                //}
                            }
                        }
                    }

                    var user = new ApplicationUser
                    {
                        UserName = "admin@dataexpertsgroup.com",
                        Email = "admin@dataexpertsgroup.com",
                        EmailConfirmed = true,
						IsInvited = true,
						IsEnabled = true,
						IsRegistered = true,
						Terms = true,
						Subscription = false,
						FirstName = "Admin",
						LastName = "User",
                        HubQuota = 9999,
                        InviteQuota = 9999
                    };

                    var adminUser = await userManager.FindByNameAsync("admin@dataexpertsgroup.com");
                    if (adminUser == null)
                    {
                        var result = await userManager.CreateAsync(user, "dexIH-1");
                        //configurationLogger.LogDebug("admin@dataexpertsgroup.com user created.");
                        adminUser = await userManager.FindByNameAsync("admin@dataexpertsgroup.com");
                    }

                    if (!(await userManager.IsInRoleAsync(adminUser, "ADMINISTRATOR")))
                    {
                        await userManager.AddToRoleAsync(adminUser, "ADMINISTRATOR");
                        //configurationLogger.LogDebug("admin@dataexpertsgroup.com  added to administrator role");
                    }
                }

                var internalHub = await repoDbContext.DexihHubs.FirstOrDefaultAsync(c => c.IsInternal);
                if (internalHub == null)
                {
                    internalHub = new DexihHub()
                    {
                        HubKey = 0,
                        IsInternal = true,
                        IsValid = true,
                        Name = "Internal Hub - not for use."
                    };

                    await AddOrUpdateAsync(repoDbContext, b => b.HubKey, new DexihHub[] { internalHub });
                }

				var internalHubKey = repoDbContext.DexihHubs.First(c => c.IsInternal && c.IsValid).HubKey;

				//add reference data
				var databaseTypes = GetDatabaseTypes();
                await AddOrUpdateAsync(repoDbContext, b => b.DatabaseTypeKey, databaseTypes);
                var updateStrategies = GetUpdateStrategies();
                await AddOrUpdateAsync(repoDbContext, b => b.UpdateStrategyKey, updateStrategies);
                var standardFunctions = GetStandardFunctions();
                await AddOrUpdateAsync(repoDbContext, b=>b.StandardFunctionKey, standardFunctions);
                var transformTypes = GetTransforms();
                await AddOrUpdateAsync(repoDbContext, b=>b.TransformKey,  transformTypes);
                var profileRules = GetProfileRules();
                await AddOrUpdateAsync(repoDbContext, b => b.ProfileRuleKey, profileRules);
                var settings = GetSettings();
                await AddOrUpdateAsync(repoDbContext, b => b.Name, settings);

                if (repoDbContext.DexihFileFormat.Count() == 0)
                {
                    var fileFormats = GetFileFormats(internalHubKey);
                    await AddOrUpdateAsync(repoDbContext, b => b.FileFormatKey, fileFormats);
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private async Task AddOrUpdateAsync<TEntity>(
            DexihRepositoryContext repoDbContext,
            Func<TEntity, object> propertyToMatch, IEnumerable<TEntity> entities)
            where TEntity : class
        {
            var entries = await repoDbContext.Set<TEntity>().ToListAsync();

            foreach (var item in entities)
            {
                //var entry = await repoDbContext.Set<TEntity>().SingleOrDefaultAsync(g => propertyToMatch(g).Equals(propertyToMatch(item)));
                var entry = entries.SingleOrDefault(g => propertyToMatch(g).Equals(propertyToMatch(item)));
                if(entry == null)
                {
                    repoDbContext.Set<TEntity>().Add(item);
                } else
                {
                    item.CopyProperties(entry, true);
                }
            }

            await repoDbContext.SaveChangesAsync();
        }

        public DexihUpdateStrategy[] GetUpdateStrategies()
        {
            var updateStrategies = new DexihUpdateStrategy[]
            {
                new DexihUpdateStrategy { UpdateStrategyKey = 1, Name="Reload", Description = "Truncate target table and reload", TruncateBeforeLoad = true, UpdateWhenExists = false, DeleteWhenNotExists = false, PreserveHistory = false, CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true  },
                new DexihUpdateStrategy { UpdateStrategyKey = 2, Name="Append", Description = "Append all rows to target table", TruncateBeforeLoad = false, UpdateWhenExists = false, DeleteWhenNotExists = false, PreserveHistory = false, CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true  },
                new DexihUpdateStrategy { UpdateStrategyKey = 3, Name="AppendUpdate", Description = "Append new rows and update existing rows", TruncateBeforeLoad = false, UpdateWhenExists = true, DeleteWhenNotExists = false, PreserveHistory = false, CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true  },
                new DexihUpdateStrategy { UpdateStrategyKey = 4, Name="AppendUpdateDelete", Description = "Append new rows, update existing rows, and delete \"deleted\" rows", TruncateBeforeLoad = false, UpdateWhenExists = true, DeleteWhenNotExists = true, PreserveHistory = false, CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true  },
                new DexihUpdateStrategy { UpdateStrategyKey = 5, Name="AppendUpdatePreserve", Description = "Append new rows and update existing rows, and preserve changes", TruncateBeforeLoad = false, UpdateWhenExists = true, DeleteWhenNotExists = false, PreserveHistory = true, CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true  },
                new DexihUpdateStrategy { UpdateStrategyKey = 6, Name="AppendUpdateDeletePreserve", Description = "Append new rows, check for updates and deletes, and preserve changes", TruncateBeforeLoad = false, UpdateWhenExists = true, DeleteWhenNotExists = true, PreserveHistory = true, CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true  },
            };

            return updateStrategies;
        }

        public DexihDatabaseType[] GetDatabaseTypes()
        {
            var databaseTypes = new DexihDatabaseType[]
            {
                new DexihDatabaseType { DatabaseTypeKey = 1, Category = transforms.Connection.ECategory.SqlDatabase, AllowManaged = true, AllowSource = true, AllowTarget = true, Name = "SQL Server", Class = "dexih.connections.sql.ConnectionSqlServer", Assembly  = "dexih.connections.sql", AllowConnectionstring = true, AllowDatabase = true, AllowWindowsAuth = true, AllowUserpass = true, DatabaseHelp = "Database name", ServerHelp = "SqlServer Server Name", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                // new DexihDatabaseType { DatabaseTypeKey = 2, Category = transforms.Connection.ECategory.WebService, AllowManaged = false, AllowSource = true, AllowTarget = false, Name = "Web Service Method", Class = "dexih.connections.webservice.ConnectionSoap", Assembly  = "dexih.connections.webservice.soap", AllowConnectionstring = false, AllowDatabase = false, AllowWindowsAuth = true, AllowUserpass = true, DatabaseHelp =  "", ServerHelp = "Location of the WSDL", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihDatabaseType { DatabaseTypeKey = 3, Category = transforms.Connection.ECategory.File, AllowManaged = false, AllowSource = true, AllowTarget = true, Name = "Azure Flat File", Class = "dexih.connections.azure.ConnectionFlatFileAzureFile", Assembly  = "dexih.connections.azure", AllowConnectionstring = true, AllowDatabase = true, AllowWindowsAuth = false, AllowUserpass = true, DatabaseHelp =  "Database name", ServerHelp = "Azure EndPoint", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihDatabaseType { DatabaseTypeKey = 4, Category = transforms.Connection.ECategory.NoSqlDatabase, AllowManaged = true, AllowSource = true, AllowTarget = true, Name = "Azure Storage Table", Class = "dexih.connections.azure.ConnectionAzureTable", Assembly  = "dexih.connections.azure", AllowConnectionstring = true, AllowDatabase = false, AllowWindowsAuth = false, AllowUserpass = true, DatabaseHelp =  "Database name", ServerHelp = "Azure EndPoint", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihDatabaseType { DatabaseTypeKey = 5, Category = transforms.Connection.ECategory.File, AllowManaged = false, AllowSource = true, AllowTarget = true, Name = "Local Flat File", Class = "dexih.connections.flatfile.ConnectionFlatFileLocal", Assembly  = "dexih.connections.flatfile", AllowConnectionstring = false, AllowDatabase = true, AllowWindowsAuth = false, AllowUserpass = false, DatabaseHelp =  "SubDirectory", ServerHelp = "Local root file path", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihDatabaseType { DatabaseTypeKey = 6, Category = transforms.Connection.ECategory.WebService, AllowManaged = false, AllowSource = true, AllowTarget = false, Name = "Restful Web Service", Class = "dexih.connections.webservice.ConnectionRestful", Assembly  = "dexih.connections.webservice.restful", AllowConnectionstring = false, AllowDatabase = false, AllowWindowsAuth = false, AllowUserpass = false, DatabaseHelp =  "", ServerHelp = "Restful Service Url (use {0},{1} for parameters)", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihDatabaseType { DatabaseTypeKey = 7, Category = transforms.Connection.ECategory.DatabaseFile, AllowManaged = true, AllowSource = true, AllowTarget = true, Name = "SQLite Database", Class = "dexih.connections.sql.ConnectionSqlite", Assembly  = "dexih.connections.sql", AllowConnectionstring = true, AllowDatabase = true, AllowWindowsAuth = true, AllowUserpass = true, DatabaseHelp =  "Sqlite File Name", ServerHelp = "Sqlite File Location", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihDatabaseType { DatabaseTypeKey = 8, Category = transforms.Connection.ECategory.SqlDatabase, AllowManaged = true, AllowSource = true, AllowTarget = true, Name = "PostgreSql Database", Class = "dexih.connections.sql.ConnectionPostgreSql", Assembly  = "dexih.connections.sql", AllowConnectionstring = true, AllowDatabase = true, AllowWindowsAuth = true, AllowUserpass = true, DatabaseHelp =  "Database name", ServerHelp = "Host:Port", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
				new DexihDatabaseType { DatabaseTypeKey = 9, Category = transforms.Connection.ECategory.DatabaseFile, AllowManaged = true, AllowSource = true, AllowTarget = true, Name = "Excel File", Class = "dexih.connections.excel.ConnectionExcel", Assembly  = "dexih.connections.excel", AllowConnectionstring = false, AllowDatabase = true, AllowWindowsAuth = false, AllowUserpass = false, DatabaseHelp =  "Excel File", ServerHelp = "Path to Excel File", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
				new DexihDatabaseType { DatabaseTypeKey = 10, Category = transforms.Connection.ECategory.Hub, AllowManaged = false, AllowSource = true, AllowTarget = false, Name = "Information Hub", Class = "dexih.connections.dexih.ConnectionDexih", Assembly  = "dexih.connections.dexih", AllowConnectionstring = false, AllowDatabase = true, AllowWindowsAuth = false, AllowUserpass = true, DatabaseHelp =  "Published Hub Data", ServerHelp = "URL to Information Hub", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihDatabaseType { DatabaseTypeKey = 11, Category = transforms.Connection.ECategory.SqlDatabase, AllowManaged = true, AllowSource = true, AllowTarget = true, Name = "MySql", Class = "dexih.connections.sql.ConnectionMySql", Assembly  = "dexih.connections.sql", AllowConnectionstring = true, AllowDatabase = true, AllowWindowsAuth = true, AllowUserpass = true, DatabaseHelp =  "Database name", ServerHelp = "MySql Server Name", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihDatabaseType { DatabaseTypeKey = 12, Category = transforms.Connection.ECategory.File, AllowManaged = false, AllowSource = true, AllowTarget = true, Name = "Ftp Flat File", Class = "dexih.connections.ftp.ConnectionFlatFileFtp", Assembly  = "dexih.connections.ftp", AllowConnectionstring = false, AllowDatabase = true, AllowWindowsAuth = false, AllowUserpass = false, DatabaseHelp =  "SubDirectory", ServerHelp = "Ftp Server & Path (e.g. ftp://server/path)", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihDatabaseType { DatabaseTypeKey = 13, Category = transforms.Connection.ECategory.File, AllowManaged = false, AllowSource = true, AllowTarget = true, Name = "SFtp Flat File", Class = "dexih.connections.sftp.ConnectionFlatFileSftp", Assembly  = "dexih.connections.sftp", AllowConnectionstring = false, AllowDatabase = true, AllowWindowsAuth = false, AllowUserpass = false, DatabaseHelp =  "SubDirectory", ServerHelp = "Sftp Server & Path (e.g. sftp://server/path)", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
			};

            return databaseTypes;
        }

        public DexihFileFormat[] GetFileFormats(long internalHubKey)
        {
            var fileFormats = new DexihFileFormat[]
            {
                new DexihFileFormat {HubKey = internalHubKey, Name = "Comma delimited, headers", IsDefault = true, AllowComments = false, BufferSize = 2048, Comment = '#', Delimiter=",", DetectColumnCountChanges = false, HasHeaderRecord = true, IgnoreHeaderWhiteSpace = false, IgnoreReadingExceptions = false, IgnoreQuotes = false, Quote = '\"', QuoteAllFields = false, QuoteNoFields = false, SkipEmptyRecords = false, TrimFields = false, TrimHeaders = false, WillThrowOnMissingField = true, CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihFileFormat {HubKey = internalHubKey, Name = "Comma delimited, no headers", IsDefault = true, AllowComments = false, BufferSize = 2048, Comment = '#', Delimiter=",", DetectColumnCountChanges = false, HasHeaderRecord = false, IgnoreHeaderWhiteSpace = false, IgnoreReadingExceptions = false, IgnoreQuotes = false, Quote = '\"', QuoteAllFields = false, QuoteNoFields = false, SkipEmptyRecords = false, TrimFields = false, TrimHeaders = false, WillThrowOnMissingField = true, CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihFileFormat {HubKey = internalHubKey, Name = "No delimiter, no headers", IsDefault = true, AllowComments = false, BufferSize = 2048, Comment = '#', Delimiter="None!@#$", DetectColumnCountChanges = false, HasHeaderRecord = false, IgnoreHeaderWhiteSpace = false, IgnoreReadingExceptions = false, IgnoreQuotes = false, Quote = '\"', QuoteAllFields = false, QuoteNoFields = false, SkipEmptyRecords = false, TrimFields = false, TrimHeaders = false, WillThrowOnMissingField = true, CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
            };

            return fileFormats;
        }

        public dexih.repository.DexihTransform[] GetTransforms()
        {
            var transforms = new dexih.repository.DexihTransform[]
            {
                new dexih.repository.DexihTransform() { TransformKey=1, TransformType = DexihTransform.ETransformType.Mapping, RequiresTransformTable = true, Name = "Mapping", Description = "Apply mapping rules from source to target.", Class = "dexih.transforms.TransformMapping", Assembly = "dexih.transforms", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true, AllowUserConfig = true, AllowSort = false, AllowColumnSelect = false, AllowStandardFunctions = true, AllowAggregateFunctions = false, AllowConditionFunctions = false, AllowRowFunctions = false, AllowJoin = false, AllowPassthrough = true, AllowMappingOutputs = true, Icon = "fa fa-random" },
                new dexih.repository.DexihTransform() { TransformKey=2, TransformType = DexihTransform.ETransformType.Filter, RequiresTransformTable = false, Name = "Filter", Description = "Filter rows based on a condition.", Class = "dexih.transforms.TransformFilter", Assembly = "dexih.transforms", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true , AllowUserConfig = true, AllowSort = false, AllowColumnSelect = false, AllowStandardFunctions = false, AllowAggregateFunctions = false, AllowConditionFunctions = true, AllowRowFunctions = false, AllowJoin = false, AllowPassthrough = false, AllowMappingOutputs = false, Icon = "fa fa-filter" },
                new dexih.repository.DexihTransform() { TransformKey=3, TransformType = DexihTransform.ETransformType.Sort, RequiresTransformTable = false, Name = "Sort", Description = "Sort a table by one or more columns.", Class = "dexih.transforms.TransformSort", Assembly = "dexih.transforms", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true , AllowUserConfig = true, AllowSort = true, AllowStandardFunctions = false, AllowAggregateFunctions = false, AllowConditionFunctions = false, AllowRowFunctions = false, AllowJoin = false, AllowPassthrough = false, AllowMappingOutputs = false, Icon = "fa fa-sort-alpha-asc" },
                new dexih.repository.DexihTransform() { TransformKey=4, TransformType = DexihTransform.ETransformType.Group, RequiresTransformTable = true, Name = "Group", Description = "Group columns and apply aggregation rules to other columns.", Class = "dexih.transforms.TransformGroup", Assembly = "dexih.transforms", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true , AllowUserConfig = true, AllowSort = false, AllowColumnSelect = true, AllowStandardFunctions = false, AllowAggregateFunctions = true, AllowConditionFunctions = false, AllowRowFunctions = false, AllowJoin = false, AllowPassthrough = true, AllowMappingOutputs = true, Icon = "fa fa-cubes" },
                new dexih.repository.DexihTransform() { TransformKey=5, TransformType = DexihTransform.ETransformType.Join, RequiresTransformTable = false, Name = "Join", Description = "Join two tables by first loading the secondary table into memory.  This is fast when the secondary table is not large.", Class = "dexih.transforms.TransformJoin", Assembly = "dexih.transforms", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true , AllowUserConfig = true, AllowSort = false, AllowColumnSelect = false, AllowStandardFunctions = false, AllowAggregateFunctions = false, AllowConditionFunctions = false, AllowRowFunctions = false, AllowJoin = true, AllowPassthrough = false, AllowMappingOutputs = true, Icon = "fa fa-link" },
                new dexih.repository.DexihTransform() { TransformKey=6, TransformType = DexihTransform.ETransformType.Rows, RequiresTransformTable = true, Name = "Rows", Description = "Groups columns and generates rows.", Class = "dexih.transforms.TransformRows", Assembly = "dexih.transforms", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true , AllowUserConfig = true, AllowSort = false, AllowColumnSelect = true, AllowStandardFunctions = false, AllowAggregateFunctions = false, AllowConditionFunctions = false, AllowRowFunctions = true, AllowJoin = false, AllowPassthrough = true, AllowMappingOutputs = true, Icon = "fa fa-bars" },
                new dexih.repository.DexihTransform() { TransformKey=7, TransformType = DexihTransform.ETransformType.Lookup, RequiresTransformTable = false, Name = "Lookup", Description = "Looks up a value in an external service.", Class = "dexih.transforms.TransformLookup", Assembly = "dexih.transforms", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true , AllowUserConfig = true, AllowSort = false, AllowColumnSelect = false, AllowStandardFunctions = false, AllowAggregateFunctions = false, AllowConditionFunctions = false, AllowRowFunctions = false, AllowJoin = true, AllowPassthrough = true, AllowMappingOutputs = false, Icon = "fa fa-binoculars" },
                new dexih.repository.DexihTransform() { TransformKey=8, TransformType = DexihTransform.ETransformType.Validation, RequiresTransformTable = true, Name = "Validation", Description = "Validates and cleans/rejects data", Class = "dexih.transforms.TransformValidation", Assembly = "dexih.transforms", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true , AllowUserConfig = false, AllowSort = false, AllowColumnSelect = false, AllowStandardFunctions = false, AllowAggregateFunctions = false, AllowConditionFunctions = true, AllowRowFunctions = false, AllowJoin = false, AllowPassthrough = false, AllowMappingOutputs = true, Icon = "fa fa-check-square-o" },
                new dexih.repository.DexihTransform() { TransformKey=9, TransformType = DexihTransform.ETransformType.Delta, RequiresTransformTable = false, Name = "Delta", Description = "Looks up a value in an external service.", Class = "dexih.transforms.TransformDelta", Assembly = "dexih.transforms", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true , AllowUserConfig = false, AllowSort = false, AllowColumnSelect = false, AllowStandardFunctions = false, AllowAggregateFunctions = false, AllowConditionFunctions = false, AllowRowFunctions = false, AllowJoin = false, AllowPassthrough = false, AllowMappingOutputs = false, Icon = "fa fa-exchange" },
                new dexih.repository.DexihTransform() { TransformKey=10, TransformType = DexihTransform.ETransformType.Concatinate, RequiresTransformTable = false, Name = "Concatinate", Description = "Concatinate (union) the two data streams together.", Class = "dexih.transforms.TransformConcatinate", Assembly = "dexih.transforms", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true , AllowUserConfig = true, AllowSort = false, AllowColumnSelect = false, AllowStandardFunctions = false, AllowAggregateFunctions = false, AllowConditionFunctions = false, AllowRowFunctions = false, AllowJoin = false, AllowPassthrough = false, AllowMappingOutputs = false, Icon = "fa fa-angle-double-down" }
            };

            return transforms;
        }

        public DexihProfileRule[] GetProfileRules()
        {
            var profileRules = new DexihProfileRule[]
            {
                new DexihProfileRule() {ProfileRuleKey = 1, Name = "% Null Values", Description = "The % of null values", Class = "dexih.functions.StandardProfiles", Assembly = "dexih.functions", Method= "Nulls", ResultMethod="NullsResult", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihProfileRule() {ProfileRuleKey = 2, Name = "% Blank Values", Description = "The % of blank values", Class = "dexih.functions.StandardProfiles", Assembly = "dexih.functions", Method= "Blanks", ResultMethod="BlanksResult", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihProfileRule() {ProfileRuleKey = 3, Name = "% Zeros", Description = "The % of zero values", Class = "dexih.functions.StandardProfiles", Assembly = "dexih.functions", Method= "Zeros", ResultMethod="ZerosResult", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihProfileRule() {ProfileRuleKey = 4, Name = "Maximum String Length", Description = "The maximum string length", Class = "dexih.functions.StandardProfiles", Assembly = "dexih.functions", Method= "MaxLength", ResultMethod="MaxLengthResult", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihProfileRule() {ProfileRuleKey = 5, Name = "Maximum Numeric", Description = "The maximum numeric value", Class = "dexih.functions.StandardProfiles", Assembly = "dexih.functions", Method= "MaxValue", ResultMethod="MaxValueResult", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihProfileRule() {ProfileRuleKey = 6, Name = "Distinct Values", Description = "The number of distinct values", Class = "dexih.functions.StandardProfiles", Assembly = "dexih.functions", Method= "DistinctValues", ResultMethod="DistinctValuesResult", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihProfileRule() {ProfileRuleKey = 7, Name = "String Pattern", Description = "The string pattern.  N=Number, a=lowercase, A=uppercase", Class = "dexih.functions.StandardProfiles", Assembly = "dexih.functions", Method= "Patterns", ResultMethod="PatternsResult", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
                new DexihProfileRule() {ProfileRuleKey = 8, Name = "Datatypes", Description = "Tests the possible data types for a column", Class = "dexih.functions.StandardProfiles", Assembly = "dexih.functions", Method= "BestDataType", ResultMethod="BestDataTypeResult", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
            };

            return profileRules;
        }

        public DexihSetting[] GetSettings()
        {
            var settings = new DexihSetting[]
            {
                new DexihSetting() {Category = "Naming", Name =  "Stage.Table.Name", Value =  "stg{0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "Validate.Table.Name", Value =  "val{0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "Transform.Table.Name", Value =  "trn{0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "Deliver.Table.Name", Value =  "{0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
				new DexihSetting() {Category = "Naming", Name =  "Publish.Table.Name", Value =  "{0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
				new DexihSetting() {Category = "Naming", Name =  "Stage.Table.Description", Value =  "The staging table for {0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "Validate.Table.Description", Value =  "The validation table for {0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "Transform.Table.Description", Value =  "The transform table for {0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "Deliver.Table.Description", Value =  "The delivered table for {0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
				new DexihSetting() {Category = "Naming", Name =  "Publish.Table.Description", Value =  "The published data for {0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "Table.RejectName", Value =  "Reject{0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "Table.ProfileName", Value =  "Profile{0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "Stage.Datalink.Name", Value =  "Staging load for {0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "Validate.Datalink.Name", Value =  "Validation load for {0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "Transform.Datalink.Name", Value =  "Transform load for {0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "Deliver.Datalink.Name", Value =  "Deliver load for {0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "Publish.Datalink.Name", Value =  "Publish load for {0}", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "CreateDate.Column.Name", Value =  "CreateDate", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "CreateDate.Column.Logical", Value =  "CreateDate", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "CreateDate.Column.Description", Value =  "The date and time the record first created.", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "UpdateDate.Column.Name", Value =  "UpdateDate", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "UpdateDate.Column.Logical", Value =  "UpdateDate", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "UpdateDate.Column.Description", Value =  "The date and time the record last updated.", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "CreateAuditKey.Column.Name", Value =  "CreateAuditKey", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "CreateAuditKey.Column.Logical", Value =  "CreateAuditKey", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "CreateAuditKey.Column.Description", Value =  "Link to the audit key that created the record.", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "UpdateAuditKey.Column.Name", Value =  "UpdateAuditKey", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "UpdateAuditKey.Column.Logical", Value =  "UpdateAuditKey", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "UpdateAuditKey.Column.Description", Value =  "Link to the audit key that updated the record.", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "SurrogateKey.Column.Name", Value =  "{0}Sk", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "SurrogateKey.Column.Logical", Value =  "{0}Sk", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "SurrogateKey.Column.Description", Value =  "The surrogate key created for the table {0}.", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "ValidFromDate.Column.Name", Value =  "ValidFromDate", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "ValidFromDate.Column.Logical", Value =  "ValidFromDate", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "ValidFromDate.Column.Description", Value =  "The date and time the record becomes valid.", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "ValidToDate.Column.Name", Value =  "ValidToDate", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "ValidToDate.Column.Logical", Value =  "ValidToDate", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "ValidToDate.Column.Description", Value =  "The date and time the record becomes invalid.", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "IsCurrentField.Column.Name", Value =  "IsCurrent", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "IsCurrentField.Column.Logical", Value =  "IsCurrent", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
				new DexihSetting() {Category = "Naming", Name =  "IsCurrentField.Column.Description", Value =  "True/False - Is the current record within the valid range?", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "SourceSurrogateKey.Column.Name", Value =  "SourceSk", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "SourceSurrogateKey.Column.Logical", Value =  "SourceSk", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "SourceSurrogateKey.Column.Description", Value =  "The surrogate key from the source table.", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "ValidationStatus.Column.Name", Value =  "ValidationStatus", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "ValidationStatus.Column.Logical", Value =  "ValidationStatus", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true },
                new DexihSetting() {Category = "Naming", Name =  "ValidationStatus.Column.Description", Value =  "Indicates if the record has passed validation tests.", CreateDate = DateTime.Now, UpdateDate = DateTime.Now, IsValid = true }
            };

            return settings;
        }

        public DexihStandardFunction[] GetStandardFunctions()
        {
            var standardFunctions = new DexihStandardFunction[]
            {
new DexihStandardFunction() { StandardFunctionKey = 1, Category = "String Functions", Method = "Concat", ResultMethod = null, Assembly = "", Name = "Concatenate", Description = "Concatenates multiple string fields.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Values", InputTypes = "String[]", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 2, Category = "String Functions", Method = "IndexOf", ResultMethod = null, Assembly = "", Name = "Index Of", Description = "The zero-based index of the first occurrence of the specified string in this field.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value,Search", InputTypes = "String,String", OutputNames = "", OutputTypes = "", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 3, Category = "String Functions", Method = "Insert", ResultMethod = null, Assembly = "", Name = "Insert", Description = "Returns a new string in which a specified string is inserted at a specified index position in this instance.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value,StartIndex,InsertString", InputTypes = "String,Int32,String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 4, Category = "String Functions", Method = "Join", ResultMethod = null, Assembly = "", Name = "Join", Description = "Concatenates all the elements of a string array, using the specified separator between each element.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Seperator,Values", InputTypes = "String,String[]", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 5, Category = "String Functions", Method = "PadLeft", ResultMethod = null, Assembly = "", Name = "Pad Left", Description = "Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value,Width,PaddingChar", InputTypes = "String,Int32,String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 6, Category = "String Functions", Method = "PadRight", ResultMethod = null, Assembly = "", Name = "Pad Right", Description = "Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value,Width,PaddingChar", InputTypes = "String,Int32,String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 7, Category = "String Functions", Method = "Remove", ResultMethod = null, Assembly = "", Name = "Remove", Description = "Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value,StartIndex,Count", InputTypes = "String,Int32,Int32", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 8, Category = "String Functions", Method = "Replace", ResultMethod = null, Assembly = "", Name = "Replace", Description = "Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value,OldValue,NewValue", InputTypes = "String,String,String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 9, Category = "String Functions", Method = "Split", ResultMethod = null, Assembly = "", Name = "Split", Description = "Splits a string into multiple return fields that are based on the characters in an array.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value,Seperator,Count", InputTypes = "String,String,Int32", OutputNames = "Result", OutputTypes = "String[]", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 10, Category = "String Functions", Method = "Substring", ResultMethod = null, Assembly = "", Name = "Substring", Description = "Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "StringValue,Start,Length", InputTypes = "String,Int32,Int32", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 11, Category = "String Functions", Method = "ToLower", ResultMethod = null, Assembly = "", Name = "To Lowercase", Description = "Returns a copy of this string converted to lowercase.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 12, Category = "String Functions", Method = "ToUpper", ResultMethod = null, Assembly = "", Name = "To Uppercase", Description = "Returns a copy of this string converted to uppercase.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 13, Category = "String Functions", Method = "Trim", ResultMethod = null, Assembly = "", Name = "Trim", Description = "Removes all leading and trailing white-space characters from the current field.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 14, Category = "String Functions", Method = "TrimEnd", ResultMethod = null, Assembly = "", Name = "Trim End", Description = "Removes all leading and trailing occurrences of a set of characters specified in an array from the current field.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 15, Category = "String Functions", Method = "TrimStart", ResultMethod = null, Assembly = "", Name = "Trim Start", Description = "Removes all trailing occurrences of a set of characters specified in an array from the current field.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 16, Category = "String Functions", Method = "Length", ResultMethod = null, Assembly = "", Name = "Length", Description = "Return the length of the string.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 17, Category = "String Functions", Method = "WordCount", ResultMethod = null, Assembly = "", Name = "WordCount", Description = "Returns the number of words in the string.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 18, Category = "String Functions", Method = "WordExtract", ResultMethod = null, Assembly = "", Name = "WordExtract", Description = "Returns the nth word (starting from 0) in the string.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value,WordNumber", InputTypes = "String,Int32", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 19, Category = "Aggregate", Method = "Sum", ResultMethod = "SumResult", Assembly = "", Name = "Sum", Description = "Sum of the values", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 20, Category = "Aggregate", Method = "Average", ResultMethod = "AverageResult", Assembly = "", Name = "Average", Description = "Average of the values", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 21, Category = "Aggregate", Method = "Min", ResultMethod = "MinResult", Assembly = "", Name = "Minimum", Description = "Minimum Value", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 22, Category = "Aggregate", Method = "Max", ResultMethod = "MaxResult", Assembly = "", Name = "Maximum", Description = "Maximum Value", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 23, Category = "Aggregate", Method = "First", ResultMethod = "FirstResult", Assembly = "", Name = "First", Description = "First Value", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 24, Category = "Aggregate", Method = "Last", ResultMethod = "LastResult", Assembly = "", Name = "Last", Description = "Last Value", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 25, Category = "Aggregate", Method = "Count", ResultMethod = "CountResult", Assembly = "", Name = "Count", Description = "Number of records", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "", InputTypes = "", OutputNames = "", OutputTypes = "", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 26, Category = "Aggregate", Method = "CountDistinct", ResultMethod = "CountDistinctResult", Assembly = "", Name = "Count Distinct", Description = "Number if distinct values", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 27, Category = "Aggregate", Method = "ConcatAgg", ResultMethod = "ConcatAggResult", Assembly = "", Name = "Concatenate Aggregate", Description = "Returns concatenated string of repeating values.", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Value,Delimiter", InputTypes = "String,String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 28, Category = "Numeric Condition", Method = "LessThan", CompareEnum = "LessThan", ResultMethod = null, Assembly = "", Name = "Less Than", Description = "Less than", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value,Compare", InputTypes = "Double,Double", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 29, Category = "Numeric Condition", Method = "LessThanEqual", CompareEnum = "LessThanEqual", ResultMethod = null, Assembly = "", Name = "Less Than/Equal", Description = "Less than or Equal", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value,Compare", InputTypes = "Double,Double", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 30, Category = "Numeric Condition", Method = "GreaterThan", CompareEnum = "GreaterThan", ResultMethod = null, Assembly = "", Name = "Greater Than", Description = "Greater than", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value,Compare", InputTypes = "Double,Double", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 31, Category = "Numeric Condition", Method = "GreaterThanEqual", CompareEnum = "GreaterThanEqual", ResultMethod = null, Assembly = "", Name = "Greater Than/Equal", Description = "Greater or Equal", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value,Compare", InputTypes = "Double,Double", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 32, Category = "String Condition", Method = "IsEqual", CompareEnum = "IsEqual", ResultMethod = null, Assembly = "", Name = "Strings Equal", Description = "The list of string values are equal.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value", InputTypes = "String[]", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 33, Category = "Numeric Condition", Method = "IsNumber", ResultMethod = null, Assembly = "", Name = "Is Number", Description = "Value is a valid number", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 34, Category = "Numeric Condition", Method = "ToDate", ResultMethod = null, Assembly = "", Name = "To Date", Description = "Return boolean if the value is a valid date.  If the date is value the result parameter contains the converted date.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "result", OutputTypes = "DateTime", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 35, Category = "Numeric Condition", Method = "IsNull", ResultMethod = null, Assembly = "", Name = "Is Null", Description = "Value is null", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 36, Category = "Numeric Condition", Method = "IsBetween", ResultMethod = null, Assembly = "", Name = "Is Between", Description = "Value is between the specified values but not equal to them.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value,LowRange,HighRange", InputTypes = "Double,Double,Double", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 37, Category = "Numeric Condition", Method = "IsBetweenInclusive", ResultMethod = null, Assembly = "", Name = "Is Between Inclusive", Description = "Value is equal or between the specified values", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value,LowRange,HighRange", InputTypes = "Double,Double,Double", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 38, Category = "String Condition", Method = "RegexMatch", ResultMethod = null, Assembly = "", Name = "Is Regular Expression", Description = "Value matches the specified regular expression.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Input,Pattern", InputTypes = "String,String", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 39, Category = "String Condition", Method = "Contains", ResultMethod = null, Assembly = "", Name = "Contains", Description = "Returns a value indicating whether a specified substring occurs within this string.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value,Contains", InputTypes = "String,String", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 40, Category = "String Condition", Method = "EndsWith", ResultMethod = null, Assembly = "", Name = "Ends With", Description = "Determines whether the end of this string instance matches the specified string.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value,EndsWith", InputTypes = "String,String", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 41, Category = "String Condition", Method = "StartsWith", ResultMethod = null, Assembly = "", Name = "Starts With", Description = "Determines whether the beginning of this string instance matches the specified string.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value,StartsWith", InputTypes = "String,String", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 42, Category = "String Condition", Method = "IsUpper", ResultMethod = null, Assembly = "", Name = "Is Uppercase", Description = "All character values are upper case.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value,SkipNonAlpha", InputTypes = "String,Boolean", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 43, Category = "String Condition", Method = "IsLower", ResultMethod = null, Assembly = "", Name = "Is Lowercase", Description = "All character values are lower case.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value,SkipNonAlpha", InputTypes = "String,Boolean", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 44, Category = "String Condition", Method = "IsAlpha", ResultMethod = null, Assembly = "", Name = "Is Letters", Description = "Only contains letters", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 45, Category = "String Condition", Method = "IsAlphaNumeric", ResultMethod = null, Assembly = "", Name = "IsLetter/Digit", Description = "Only contains letters and digits (number).", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 46, Category = "String Condition", Method = "IsPattern", ResultMethod = null, Assembly = "", Name = "Is Pattern", Description = "Matters the pattern where A=upper character, a=lower character, 9=number and other values match precisely.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value,Pattern", InputTypes = "String,String", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 47, Category = "Date", Method = "AddDays", ResultMethod = null, Assembly = "", Name = "Add Days", Description = "Returns a new DateTime that adds the specified number of days to the value of this instance.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue,AddValue", InputTypes = "DateTime,Double", OutputNames = "", OutputTypes = "", ReturnType = "DateTime", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 48, Category = "Date", Method = "AddHours", ResultMethod = null, Assembly = "", Name = "Add Hours", Description = "Returns a new DateTime that adds the specified number of hours to the value of this instance.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue,AddValue", InputTypes = "DateTime,Double", OutputNames = "", OutputTypes = "", ReturnType = "DateTime", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 49, Category = "Date", Method = "AddMilliseconds", ResultMethod = null, Assembly = "", Name = "Add Milliseconds", Description = "Returns a new DateTime that adds the specified number of milliseconds to the value of this instance.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue,AddValue", InputTypes = "DateTime,Double", OutputNames = "", OutputTypes = "", ReturnType = "DateTime", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 50, Category = "Date", Method = "AddMinutes", ResultMethod = null, Assembly = "", Name = "Add Minutes", Description = "Returns a new DateTime that adds the specified number of minutes to the value of this instance.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue,AddValue", InputTypes = "DateTime,Double", OutputNames = "", OutputTypes = "", ReturnType = "DateTime", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 51, Category = "Date", Method = "AddMonths", ResultMethod = null, Assembly = "", Name = "Add Months", Description = "Returns a new DateTime that adds the specified number of months to the value of this instance.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue,AddValue", InputTypes = "DateTime,Int32", OutputNames = "", OutputTypes = "", ReturnType = "DateTime", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 52, Category = "Date", Method = "AddSeconds", ResultMethod = null, Assembly = "", Name = "Add Seconds", Description = "Returns a new DateTime that adds the specified number of seconds to the value of this instance.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue,AddValue", InputTypes = "DateTime,Double", OutputNames = "", OutputTypes = "", ReturnType = "DateTime", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 53, Category = "Date", Method = "AddYears", ResultMethod = null, Assembly = "", Name = "AddYears", Description = "Returns a new DateTime that adds the specified number of years to the value of this instance.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue,AddValue", InputTypes = "DateTime,Int32", OutputNames = "", OutputTypes = "", ReturnType = "DateTime", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 54, Category = "Date", Method = "DaysInMonth", ResultMethod = null, Assembly = "", Name = "DaysInMonth", Description = "Returns the number of days in the specified month and year.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 55, Category = "Date Condition", Method = "IsDaylightSavingTime", ResultMethod = null, Assembly = "", Name = "Is Daylight Saving", Description = "Indicates whether this instance of DateTime is within the daylight saving time range for the current time zone.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 56, Category = "Date Condition", Method = "IsLeapYear", ResultMethod = null, Assembly = "", Name = "Is Leap Year", Description = "Returns an indication whether the specified year is a leap year.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 57, Category = "Date Condition", Method = "IsWeekend", ResultMethod = null, Assembly = "", Name = "Is Weekend", Description = "Date falls on a weekend", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 58, Category = "Date Condition", Method = "IsWeekDay", ResultMethod = null, Assembly = "", Name = "Is Weekday", Description = "Date falls on a week day", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 59, Category = "Date", Method = "DayOfMonth", ResultMethod = null, Assembly = "", Name = "Day of the Month", Description = "The day number of the month", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 60, Category = "Date", Method = "DayOfWeekName", ResultMethod = null, Assembly = "", Name = "Day of the Week Name", Description = "The name of the day of the week (e.g. Monday).", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 61, Category = "Date", Method = "DayOfWeekNumber", ResultMethod = null, Assembly = "", Name = "Day of the Week Number", Description = "The number of the day of the week (Sunday=0 - Saturday=6).", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 62, Category = "Date", Method = "WeekOfYear", ResultMethod = null, Assembly = "", Name = "Week of the Year", Description = "The week number of the year.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 63, Category = "Date", Method = "DayOfYear", ResultMethod = null, Assembly = "", Name = "Day of the Year", Description = "The day number of the year.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 64, Category = "Date", Method = "Month", ResultMethod = null, Assembly = "", Name = "Month ", Description = "The month number of the year (1-12)", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 65, Category = "Date", Method = "ShortMonth", ResultMethod = null, Assembly = "", Name = "ShortMonth", Description = "A three letter value of the month (e.g. Jan, Feb, Mar).", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 66, Category = "Date", Method = "LongMonth", ResultMethod = null, Assembly = "", Name = "LongMonth", Description = "The full name of the month.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 67, Category = "Date", Method = "Year", ResultMethod = null, Assembly = "", Name = "Year", Description = "The year", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 68, Category = "Date", Method = "ToLongDateString", ResultMethod = null, Assembly = "", Name = "To Long Date String", Description = "Converts the value of the current DateTime object to its equivalent long date string representation.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 69, Category = "Date", Method = "ToLongTimeString", ResultMethod = null, Assembly = "", Name = "To Long Time String", Description = "Converts the value of the current DateTime object to its equivalent long time string representation.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 70, Category = "Date", Method = "ToShortDateString", ResultMethod = null, Assembly = "", Name = "To Short Date String", Description = "Converts the value of the current DateTime object to its equivalent short date string representation.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 71, Category = "Date", Method = "ToShortTimeString", ResultMethod = null, Assembly = "", Name = "To Short Time String", Description = "Converts the value of the current DateTime object to its equivalent short time string representation.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 72, Category = "Date", Method = "DateToString", ResultMethod = null, Assembly = "", Name = "Date To String", Description = "Converts the value of the current DateTime object to its equivalent string representation using the formatting conventions of the current culture.(OverridesValueType.ToString().)", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "DateValue,Format", InputTypes = "DateTime,String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 73, Category = "Date", Method = "DateNow", ResultMethod = null, Assembly = "", Name = "Date Now", Description = "The local date time", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "", InputTypes = "", OutputNames = "", OutputTypes = "", ReturnType = "DateTime", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 74, Category = "Date", Method = "DateNowUtc", ResultMethod = null, Assembly = "", Name = "Date Now UTC", Description = "The current Universal Coordinated Time (UCT/GMT). ", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "", InputTypes = "", OutputNames = "", OutputTypes = "", ReturnType = "DateTime", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 79, Category = "Security", Method = "Encrypt", ResultMethod = null, Assembly = "", Name = "Encrypt", Description = "Encrypts the string using the key string.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value,Key", InputTypes = "String,String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 80, Category = "Security", Method = "Decrypt", ResultMethod = null, Assembly = "", Name = "Decrypt", Description = "Decrypts the string using the key string.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value,Key", InputTypes = "String,String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 81, Category = "Security", Method = "CreateSaltedHash", ResultMethod = null, Assembly = "", Name = "CreateHash", Description = "Creates a random-salted, hash of the string.  This is strong encryption and can only be validated using the ValidateHash function.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 82, Category = "Security", Method = "ValidateSaltedHash", ResultMethod = null, Assembly = "", Name = "ValidateHash", Description = "Validates a value against a Hash created using the CreateHash function.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value,Hash", InputTypes = "String,String", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 83, Category = "Maths", Method = "Abs", ResultMethod = null, Assembly = "", Name = "Abs", Description = "Returns the absolute value of a Decimal number.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 84, Category = "Maths", Method = "Acos", ResultMethod = null, Assembly = "", Name = "Acos", Description = "Returns the angle whose cosine is the specified number.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 85, Category = "Maths", Method = "Asin", ResultMethod = null, Assembly = "", Name = "Asin", Description = "Returns the angle whose sine is the specified number.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 86, Category = "Maths", Method = "Atan", ResultMethod = null, Assembly = "", Name = "Atan", Description = "Returns the angle whose tangent is the specified number.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 87, Category = "Maths", Method = "Atan2", ResultMethod = null, Assembly = "", Name = "Atan2", Description = "Returns the angle whose tangent is the quotient of two specified numbers.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "x,y", InputTypes = "Double,Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 88, Category = "Maths", Method = "Cos", ResultMethod = null, Assembly = "", Name = "Cos", Description = "Returns the cosine of the specified angle.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 89, Category = "Maths", Method = "Cosh", ResultMethod = null, Assembly = "", Name = "Cosh", Description = "Returns the hyperbolic cosine of the specified angle.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 90, Category = "Maths", Method = "DivRem", ResultMethod = null, Assembly = "", Name = "DivRem", Description = "Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Dividend,Divisor", InputTypes = "Int32,Int32", OutputNames = "Remainder", OutputTypes = "Int32", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 91, Category = "Maths", Method = "Exp", ResultMethod = null, Assembly = "", Name = "Exp", Description = "Returns e raised to the specified power.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 92, Category = "Maths", Method = "IEEERemainder", ResultMethod = null, Assembly = "", Name = "IEEERemainder", Description = "Returns the remainder resulting from the division of a specified number by another specified number.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "x,y", InputTypes = "Double,Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 93, Category = "Maths", Method = "Log", ResultMethod = null, Assembly = "", Name = "Log", Description = "Returns the natural (base e) logarithm of a specified number.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 94, Category = "Maths", Method = "Log10", ResultMethod = null, Assembly = "", Name = "Log10", Description = "Returns the base 10 logarithm of a specified number.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 95, Category = "Maths", Method = "Pow", ResultMethod = null, Assembly = "", Name = "Pow", Description = "Returns a specified number raised to the specified power.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "x,y", InputTypes = "Double,Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 96, Category = "Maths", Method = "Round", ResultMethod = null, Assembly = "", Name = "Round", Description = "Rounds a decimal value to the nearest integral value.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 97, Category = "Maths", Method = "Sign", ResultMethod = null, Assembly = "", Name = "Sign", Description = "Returns a value indicating the sign of a decimal number.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 98, Category = "Maths", Method = "Sin", ResultMethod = null, Assembly = "", Name = "Sin", Description = "Returns the sine of the specified angle.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 99, Category = "Maths", Method = "Sinh", ResultMethod = null, Assembly = "", Name = "Sinh", Description = "Returns the hyperbolic sine of the specified angle.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 100, Category = "Maths", Method = "Sqrt", ResultMethod = null, Assembly = "", Name = "Sqrt", Description = "Returns the square root of a specified number.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 101, Category = "Maths", Method = "Tan", ResultMethod = null, Assembly = "", Name = "Tan", Description = "Returns the tangent of the specified angle.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 102, Category = "Maths", Method = "Tanh", ResultMethod = null, Assembly = "", Name = "Tanh", Description = "Returns the hyperbolic tangent of the specified angle.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 103, Category = "Maths", Method = "Truncate", ResultMethod = null, Assembly = "", Name = "Truncate", Description = "Calculates the integral part of a specified decimal number.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 104, Category = "Decimal Functions", Method = "Add", ResultMethod = null, Assembly = "", Name = "Add", Description = "Adds two specified Decimal values.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value1,Value2", InputTypes = "Decimal,Decimal", OutputNames = "", OutputTypes = "", ReturnType = "Decimal", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 105, Category = "Decimal Functions", Method = "Ceiling", ResultMethod = null, Assembly = "", Name = "Ceiling", Description = "Returns the smallest integral value that is greater than or equal to the specified decimal number.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Decimal", OutputNames = "", OutputTypes = "", ReturnType = "Decimal", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 106, Category = "Decimal Functions", Method = "Divide", ResultMethod = null, Assembly = "", Name = "Divide", Description = "Divides two specified Decimal values.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value1,Value2", InputTypes = "Decimal,Decimal", OutputNames = "", OutputTypes = "", ReturnType = "Decimal", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 107, Category = "Decimal Functions", Method = "Floor", ResultMethod = null, Assembly = "", Name = "Floor", Description = "Rounds a specified Decimal number to the closest integer toward negative infinity.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Decimal", OutputNames = "", OutputTypes = "", ReturnType = "Decimal", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 108, Category = "Decimal Functions", Method = "Multiply", ResultMethod = null, Assembly = "", Name = "Multiply", Description = "Multiplies two specified Decimal values.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value1,Value2", InputTypes = "Decimal,Decimal", OutputNames = "", OutputTypes = "", ReturnType = "Decimal", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 109, Category = "Decimal Functions", Method = "Negate", ResultMethod = null, Assembly = "", Name = "Negate", Description = "Returns the result of multiplying the specifiedDecimal value by negative one.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Decimal", OutputNames = "", OutputTypes = "", ReturnType = "Decimal", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 110, Category = "Decimal Functions", Method = "Remainder", ResultMethod = null, Assembly = "", Name = "Remainder", Description = "Computes the remainder after dividing two Decimal values.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value1,Value2", InputTypes = "Decimal,Decimal", OutputNames = "", OutputTypes = "", ReturnType = "Decimal", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 111, Category = "Decimal Functions", Method = "Subtract", ResultMethod = null, Assembly = "", Name = "Subtract", Description = "Subtracts one specified Decimal value from another.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value1,Value2", InputTypes = "Decimal,Decimal", OutputNames = "", OutputTypes = "", ReturnType = "Decimal", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 112, Category = "String Functions", Method = "IsIn", ResultMethod = null, Assembly = "", Name = "IsIn", Description = "Value is one of the elements in an array", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value,CompareTo", InputTypes = "String,String[]", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 113, Category = "Series", Method = "MovingAverage", ResultMethod = "MovingAverageResult", Assembly = "", Name = "Moving Average", Description = "Calculates the average of the last (pre-count) points and the future (post-count) points.", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Series,Value,PreCount,PostCount", InputTypes = "DateTime,Double,Int32,Int32", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 114, Category = "Series", Method = "HighestSince", ResultMethod = "HighestSinceResult", Assembly = "", Name = "Highest Value since ", Description = "Provides the last date that had a higher value than this.", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Series,Value", InputTypes = "DateTime,Double", OutputNames = "value", OutputTypes = "Double", ReturnType = "DateTime", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 115, Category = "Rows", Method = "GenerateSequence", ResultMethod = null, Assembly = "", Name = "Generate Sequence", Description = "Generate rows with a sequence number field.", IsAggregate = false , IsCondition = false, IsRow = true, InputNames = "Start,End,Step", InputTypes = "Int32,Int32,Int32", OutputNames = "Sequence", OutputTypes = "Int32", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 116, Category = "Rows", Method = "SplitColumnToRows", ResultMethod = null, Assembly = "", Name = "SplitColumnToRows", Description = "Split a delimited value into rows.", IsAggregate = false , IsCondition = false, IsRow = true, InputNames = "Seperator,Value,MaxItems", InputTypes = "String,String,Int32", OutputNames = "Item", OutputTypes = "String", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 117, Category = "Rows", Method = "XPathNodesToRows", ResultMethod = null, Assembly = "", Name = "XPathNodesToRows", Description = "Split an XPath query into multiple rows", IsAggregate = false , IsCondition = false, IsRow = true, InputNames = "Xml,XPath,MaxItems", InputTypes = "String,String,Int32", OutputNames = "Node", OutputTypes = "String", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 118, Category = "Aggregate", Method = "Median", ResultMethod = "MedianResult", Assembly = "", Name = "Median", Description = "The median value in a series", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 119, Category = "Aggregate", Method = "StdDev", ResultMethod = "StdDevResult", Assembly = "", Name = "Standard Deviation", Description = "The standard deviation in a set of numbers", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 120, Category = "Aggregate", Method = "Variance", ResultMethod = "VarianceResult", Assembly = "", Name = "Variance", Description = "The variance in a set of numbers.", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 121, Category = "Xml", Method = "XPathValues", ResultMethod = null, Assembly = "", Name = "XPathValues", Description = "Parses an xml string into a series of xpath results.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Xml,XPaths", InputTypes = "String,String[]", OutputNames = "Values", OutputTypes = "String[]", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 122, Category = "JSON", Method = "JsonValues", ResultMethod = null, Assembly = "", Name = "JSONValues", Description = "Parses a JSON string into a series of elements.  The JSON string must contain only one result set.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "JSON,JSONPaths", InputTypes = "String,String[]", OutputNames = "Values", OutputTypes = "String[]", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 123, Category = "Rows", Method = "JsonElementsToRows", ResultMethod = null, Assembly = "", Name = "JSONElementsToRows", Description = "Split a JSON array into separate rows", IsAggregate = false , IsCondition = false, IsRow = true, InputNames = "JSON,JSONPath,MaxItems", InputTypes = "String,String,Int32", OutputNames = "Item", OutputTypes = "String", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 124, Category = "Aggregate", Method = "MinDate", ResultMethod = "MinDateResult", Assembly = "", Name = "MinimumDate", Description = "Minimum Date", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "DateTime", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 125, Category = "Aggregate", Method = "MaxDate", ResultMethod = "MaxDateResult", Assembly = "", Name = "MaximumDate", Description = "Maximum Date", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "Value", InputTypes = "DateTime", OutputNames = "", OutputTypes = "", ReturnType = "DateTime", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 126, Category = "Rows", Method = "GenerateDateSequence", ResultMethod = null, Assembly = "", Name = "Generate Date Sequence", Description = "Generate rows for each day from start date to end date.", IsAggregate = false , IsCondition = false, IsRow = true, InputNames = "Start,End,Step", InputTypes = "DateTime,DateTime,Int32", OutputNames = "Sequence", OutputTypes = "DateTime", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 127, Category = "Maths", Method = "GetDistanceTo", ResultMethod = null, Assembly = "", Name = "GetDistanceTo", Description = "The distance in meters between two Geographical Coordinates. ", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "FromLatitude,FromLongitude,ToLatitude,ToLongitude", InputTypes = "Double,Double,Double,Double", OutputNames = "", OutputTypes = "", ReturnType = "Double", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 128, Category = "Validation", Method = "MaxLength", ResultMethod = null, Assembly = "", Name = "Maximum Length", Description = "Checks if the string exceeds the length, and trims the string when true.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "value,maxLength", InputTypes = "String,Int32", OutputNames = "trimmedValue", OutputTypes = "String", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 129, Category = "Validation", Method = "MaxValue", ResultMethod = null, Assembly = "", Name = "Maximum Value", Description = "Checks if the number is greater than the value, and sets to the value when true.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "value,maxValue", InputTypes = "Decimal,Int32", OutputNames = "adjustedValue", OutputTypes = "Decimal", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true  },
new DexihStandardFunction() { StandardFunctionKey = 130, Category = "Aggregate", Method = "FirstWhen", ResultMethod = "FirstWhenResult", Assembly = "", Name = "First When", Description = "First resultValue when the condition = conditionValue", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "condition,conditionValue,resultValue", InputTypes = "String,String,String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 131, Category = "Aggregate", Method = "LastWhen", ResultMethod = "LastWhenResult", Assembly = "", Name = "Last When", Description = "Last resultValue when the condition = conditionValue", IsAggregate = true , IsCondition = false, IsRow = false, InputNames = "condition,conditionValue,resultValue", InputTypes = "String,String,String", OutputNames = "", OutputTypes = "", ReturnType = "String", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 132, Category = "Date Condition", Method = "IsDateTimeEqual", CompareEnum = "IsEqual", ResultMethod = null, Assembly = "", Name = "DateTime Equals", Description = "Are the specified datetime values equal.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value", InputTypes = "DateTime[]", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 133, Category = "Numeric Condition", Method = "IsNumericEqual", CompareEnum = "IsEqual", ResultMethod = null, Assembly = "", Name = "Numeric Equals", Description = "Are the specified numeric values equal.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value", InputTypes = "Decimal[]", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 134, Category = "Boolean Condition", Method = "IsBooleanEqual", CompareEnum = "IsEqual", ResultMethod = null, Assembly = "", Name = "Boolean Equals", Description = "Are the specified boolean conditions equal.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value", InputTypes = "Boolean[]", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 135, Category = "Validation", Method = "DefaultNullString", ResultMethod = null, Assembly = "", Name = "Default Null String", Description = "Checks if the string is null, and sets to the defualtValue when true.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "value,defaultValue", InputTypes = "String,String", OutputNames = "adjustedValue", OutputTypes = "String", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true  },
new DexihStandardFunction() { StandardFunctionKey = 136, Category = "Validation", Method = "DefaultBlankString", ResultMethod = null, Assembly = "", Name = "Default Blank String", Description = "Checks if the string is blank or null, and sets to the defualtValue when true.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "value,defaultValue", InputTypes = "String,String", OutputNames = "adjustedValue", OutputTypes = "String", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true  },
new DexihStandardFunction() { StandardFunctionKey = 137, Category = "Validation", Method = "DefaultNullNumber", ResultMethod = null, Assembly = "", Name = "Default Null Number", Description = "Checks if the number is null, and sets to the defualtValue when true.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "value,defaultValue", InputTypes = "Decimal,Decimal", OutputNames = "adjustedValue", OutputTypes = "Decimal", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true  },
new DexihStandardFunction() { StandardFunctionKey = 138, Category = "Boolean Condition", Method = "IsTrue", ResultMethod = null, Assembly = "", Name = "Is True", Description = "Is the specified value equal to true.", IsAggregate = false , IsCondition = true, IsRow = false, InputNames = "Value", InputTypes = "Boolean", OutputNames = "", OutputTypes = "", ReturnType = "Boolean", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },
new DexihStandardFunction() { StandardFunctionKey = 139, Category = "String Functions", Method = "SplitFixedWidth", ResultMethod = null, Assembly = "", Name = "Split Fixed Width", Description = "Splits a string based on the string positions specified.", IsAggregate = false , IsCondition = false, IsRow = false, InputNames = "Value,Positions", InputTypes = "String,Int32[]", OutputNames = "Result", OutputTypes = "String[]", ReturnType = "Int32", CreateDate = CurrentDate, UpdateDate = CurrentDate, IsValid = true },

            };

            return standardFunctions;
        }
    }
}
